This is languide.info, produced by makeinfo version 4.7 from
languide.texinfo.

START-INFO-DIR-ENTRY
* Languide::			Language-guided editing.
END-INFO-DIR-ENTRY


File: languide.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

    This file documents languide, the language-guided editing
system.  This document applies to version 1 of languide. 
Languide provides high-level editing commands, such as turning an
in-line block of code into a procedure, and substituting a call to the
procedure for the original code.  Languide is one of a pair of
companion packages. The other one, Versor, provides flexible
keybindings which can be used to navigate code in terms of its
structure.  Part of Versor's functionality is provided by the
lower-level parts of Languide. *Note Versor and Languide:
(versor)Versor and Languide, for more information.  Most of
Languide's functionality can be, and normally would be, accessed
through Versor, but it is possible to use Languide commands directly.
This manual describes the direct use of them; for use through Versor,
*Note Top: (versor)Top. 

* Menu:

* Introduction::                What it's all about
* Concepts::                    Languide works at a more abstract level than
                                most editor commands.
                                Its commands will probably make more sense
                                if you understand the abstractions it uses.
* Commands::                    Things Languide can do
* Setup::                       How to install and configure Languide
* Extension::                   How to define languages and statements
* Languide and Versor::         Interface to a companion package
                                providing easy access to commands
* Command Index::               Command Index
* Concept Index::               Concept Index

 --- The Detailed Node Listing ---

Commands

* Alterations::                   Altering the selection
* Expression handling::           Expression handling, expressions, and functions
* Statement handling::            Statement handling

Expression handling, expressions, and functions

* Employ variable::             Employ variable
                                Given an existing variable definition,
                                this finds any existing use of that
                                value, and substitutes the variable. 
* Convert to variable::         Convert region to variable
                                Given a region containing an
                                expression, this sets up a variable
                                initialised to that expression, and
                                replaces the original expression with
                                that variable.
* Convert to function::         Convert region to function
                                This takes the selected region,
                                defines a new function just before the
                                one containing the region, and
                                replaces the original region with a
                                call to the new function.
* Surround with call::          Surround region with call
                                This wraps the current region with a
                                call to a function.
* Remove call::                 Remove surrounding call
                                This removes the function call
                                surrounding point.

Statement handling

* Unify Statements::            Unify Statements
                                This makes the selected region into a
                                compound statement. 
* Make conditional::            Make the selected code conditional
* Make repeating::              Make the selected code iterative
* Scoping point::               Move to enclosing scoping point
                                This moves point to the most nearly
                                enclosing scoping point, that is, a
                                suitable place for putting new variables.
* Decision point::              Move to enclosing decision point
                                This moves point to the most nearly
                                enclosing decision point, that is, a
                                suitable place for putting a new condition.

Setup

* Configuration::               Configuring Languide

Configuration

* Auto-edit overlay face::        How to draw attention to changes away
                                  from point
* Whole statement as container::  On selecting a container, whether to
                                  make that the whole statement
* Cyclic::                        Whether statement part selection
                                  should be cyclic
* IncludeContainer::              Whether statement containers count
                                  as selectable statement parts

   


File: languide.info,  Node: Introduction,  Next: Concepts,  Prev: Top,  Up: Top

1 Introduction
**************

 Text editors have traditionally operated in terms of lines and
characters.  Languide takes a step out of that, providing
operations in terms of the syntactic units (statements, expressions)
that make up source files in typical programming languages.  It
aims to provide as single commands many of the routine high-level
editing actions that normally take many manual editing operations, for
example, taking a block of code and turning it into a function,
leaving a call to that function where the code originally was.
Although complex, these actions are completely stereotyped, and
therefore ripe for automation, as they do not really require human
intelligence to perform them. It is hoped that automating them will
not only reduce the workload for the user's fingers, but may also be
more reliable, and provide a more productive and relaxing working
environment.  In an attempt to break the tie with keyboard and
mouse, on the whole the commands are designed to work well with voice
input. It should be possible to work with very little need to type or
pronounce syntactic punctuation characters; these are detail that the
computer should be able to deal with, leaving the programmer to get
on with the abstract thinking. The need to issue a sequence of
commands with no punctuation leads naturally to an RPN-style
semantics (which should be already comfortable to users of HP-style
calculators, Forth, and PostScript). There is, for example, provision
for selecting a statement type and then searching for it, or
inserting a template for it. 


File: languide.info,  Node: Concepts,  Next: Commands,  Prev: Introduction,  Up: Top

2 Concepts
**********

  This package is built around the ideas of statements, compound
statements, and expressions.  We have a general model of
statements, in which a statement can have head, body, and optionally
tail parts - for example, the three parts of an if-then-else
statement.  We also use the idea that each statement (except for a
top-level definition) is in a container, which is another statement.
 Languide provides language guided editing for a variety of
languages. To provide equivalent functionality across the range of
supported language modes, we use a modal functions package which lets
us give a function separate definitions in each major mode. 
Languide has two groups of commands:
   * high-level editing

   * movement by statements (which you can use directly, or through
      Versor (*note Versor and Languide: (versor)Versor and
     Languide.), and which are used by     the high-level editing
     commands)
   


File: languide.info,  Node: Commands,  Next: Setup,  Prev: Concepts,  Up: Top

3 Commands
**********

 You can access Languide's commands directly with M-x, or through a
keymap, or through a menu.  This manual will describe the commands by
their names, as used with M-x.   Languide commands come in three
groups, those substituting the contents of the current selection with
something of the same nature, those acting on variables, expressions,
and functions; and those acting on statements. 

* Menu:

* Alterations::                   Altering the selection
* Expression handling::           Expression handling, expressions, and functions
* Statement handling::            Statement handling
   


File: languide.info,  Node: Alterations,  Next: Expression handling,  Prev: Commands,  Up: Commands

3.1 Alterations
===============

 The "alteration" facility is always accessed through the Versor
package, although Languide provides the underlying data. 


File: languide.info,  Node: Expression handling,  Next: Statement handling,  Prev: Alterations,  Up: Commands

3.2 Expression handling, expressions, and functions
===================================================

 This group of commands manipulates value handling constructs in
source code.  For example, you can select an expression (using the
Versor selection), and turn it into a variable, so that you can
re-use the same value.  Likewise, you can convert an expression into
a function, so that you can call it elsewhere.  

* Menu:

* Employ variable::             Employ variable
                                Given an existing variable definition,
                                this finds any existing use of that
                                value, and substitutes the variable. 
* Convert to variable::         Convert region to variable
                                Given a region containing an
                                expression, this sets up a variable
                                initialised to that expression, and
                                replaces the original expression with
                                that variable.
* Convert to function::         Convert region to function
                                This takes the selected region,
                                defines a new function just before the
                                one containing the region, and
                                replaces the original region with a
                                call to the new function.
* Surround with call::          Surround region with call
                                This wraps the current region with a
                                call to a function.
* Remove call::                 Remove surrounding call
                                This removes the function call
                                surrounding point.
   


File: languide.info,  Node: Employ variable,  Next: Convert to variable,  Prev: Expression handling,  Up: Expression handling

3.2.1 Employ variable
---------------------

The command `languide-employ-variable', given an existing variable
definition, finds any existing uses of that value, and substitutes
the variable for them. 


File: languide.info,  Node: Convert to variable,  Next: Convert to function,  Prev: Employ variable,  Up: Expression handling

3.2.2 Convert region to variable
--------------------------------

 The command `languide-convert-region-to-variable', given a region
containing an expression, sets up a variable initialised to that
expression, and replaces the original expression with that variable.



File: languide.info,  Node: Convert to function,  Next: Surround with call,  Prev: Convert to variable,  Up: Expression handling

3.2.3 Convert region to function
--------------------------------

 The command `languide-convert-region-to-function' takes the
selected region, defines a new function just before the one containing
the region, and replaces the original region with a call to the new
function. It examines the region and the surrounding code, to find any
variables referred to in the region but defined outside it, and makes
those into arguments to the new function.  


File: languide.info,  Node: Surround with call,  Next: Remove call,  Prev: Convert to function,  Up: Expression handling

3.2.4 Surround region with call
-------------------------------

 The command `surround-region-with-call' wraps the current region
with a call to a specified function, such that the region becomes the
argument list of the function. 


File: languide.info,  Node: Remove call,  Prev: Surround with call,  Up: Expression handling

3.2.5 Remove surrounding call
-----------------------------

 The command `remove-surrounding-call' removes the function call
surrounding point. This leaves the function arguments in place of the
call. 


File: languide.info,  Node: Statement handling,  Prev: Expression handling,  Up: Commands

3.3 Statement handling
======================

 This group of commands acts mostly on imperative statements.  

* Menu:

* Unify Statements::            Unify Statements
                                This makes the selected region into a
                                compound statement. 
* Make conditional::            Make the selected code conditional
* Make repeating::              Make the selected code iterative
* Scoping point::               Move to enclosing scoping point
                                This moves point to the most nearly
                                enclosing scoping point, that is, a
                                suitable place for putting new variables.
* Decision point::              Move to enclosing decision point
                                This moves point to the most nearly
                                enclosing decision point, that is, a
                                suitable place for putting a new condition.
   


File: languide.info,  Node: Unify Statements,  Next: Make conditional,  Prev: Statement handling,  Up: Statement handling

3.3.1 Unify Statements
----------------------

 The command `languide-unify-statements' makes the statement that
point, and the following N statements (where N is the prefix
argument) into a compound statement. 


File: languide.info,  Node: Make conditional,  Next: Make repeating,  Prev: Unify Statements,  Up: Statement handling

3.3.2 Make conditional
----------------------

 The command `versor:make-conditional' makes the current Versor
selection conditional, and positions point ready for filling in the
condition. If the selection is already the body of a conditional
construct, an `and' construct is wrapped around the existing
condition (unless it already has one) and point is positioned for
adding a further condition. 


File: languide.info,  Node: Make repeating,  Next: Scoping point,  Prev: Make conditional,  Up: Statement handling

3.3.3 Make repeating
--------------------

 The command `versor:make-repeating' makes the current Versor
selection be the body of a repeating construct, and positions point
ready for filling in the repeat condition. 


File: languide.info,  Node: Scoping point,  Next: Decision point,  Prev: Make repeating,  Up: Statement handling

3.3.4 Enclosing scoping point
-----------------------------

 The command `languide-enclosing-scoping-point' moves point to the
most nearly enclosing scoping point, that is, a suitable place for
putting new variables. This is largely used as an internal function
by Languide, but is also exposed for direct use in case it is useful.
 


File: languide.info,  Node: Decision point,  Prev: Scoping point,  Up: Statement handling

3.3.5 Enclosing decision point
------------------------------

 The command `languide-enclosing-decision-point' moves point to the
most nearly enclosing decision point, that is, a suitable place for
putting a new condition. This is largely used as an internal function
by Languide, but is also exposed for direct use in case it is
useful. 


File: languide.info,  Node: Setup,  Next: Extension,  Prev: Commands,  Up: Top

4 Setup
*******

 To install Languide, unpack the tarball into a suitable directory,
and put that directory on your load-path. 

* Menu:

* Configuration::               Configuring Languide
   


File: languide.info,  Node: Configuration,  Prev: Setup,  Up: Setup

4.1 Configuration
=================



* Menu:

* Auto-edit overlay face::        How to draw attention to changes away
                                  from point
* Whole statement as container::  On selecting a container, whether to
                                  make that the whole statement
* Cyclic::                        Whether statement part selection
                                  should be cyclic
* IncludeContainer::              Whether statement containers count
                                  as selectable statement parts
   


File: languide.info,  Node: Auto-edit overlay face,  Next: Whole statement as container,  Prev: Configuration,  Up: Configuration

4.1.1 Auto-edit overlay face
----------------------------

 Type: face  Default value: '`((t (:background "red")))'  How
to draw attention to what languide has done. When languide does
something that involves changes away from point, it shows the changed
text in this face, until the next user input. 


File: languide.info,  Node: Whole statement as container,  Next: Cyclic,  Prev: Auto-edit overlay face,  Up: Configuration

4.1.2 Whole statement as container
----------------------------------

 Type: boolean  Default value: `t'  Whether to include the
whole statement as the container. If this is non-nil, when you select
the container of a statement, the whole containing statement is
selected, rather than just the part of it containing the statement.
For example, if you have   if (a) {     b;     c;   } and are
on "b" and select the container of b, you will get the whole if
statement, rather than just the block body. 


File: languide.info,  Node: Cyclic,  Next: IncludeContainer,  Prev: Whole statement as container,  Up: Configuration

4.1.3 Navigate statement parts cyclically
-----------------------------------------

 Type: boolean  Default value: `nil'  Whether to step
forwards from body (or tail if present) back round to head. 


File: languide.info,  Node: IncludeContainer,  Prev: Cyclic,  Up: Configuration

4.1.4 Navigate Statement Parts includes container
-------------------------------------------------

 Type: boolean  Default value: `'t  Whether to step forwards
from body (or tail if present) or back from head, to container.  


File: languide.info,  Node: Extension,  Next: Languide and Versor,  Prev: Setup,  Up: Top

5 Extending Languide: how to define languages and statements
************************************************************

 Languide comes with definitions of common statement types for
several programming languages. You can add more, and of course
contribute them for public use should you so wish.  The file
statement-nav-directions.el implements the basic movements needed to
navigate around statements. Directions for specific statement parts
in various programming languages are defined in such files as
languide-lisp-like.el, languide-c-like.el and so forth;
languide-c-like is a fairly rich source of examples.  Normally, a
sequence of directions is followed, and the last one is taken as the
result, that is, the thing to leave selected. To allow multipart
selections, as versor does, you can indicate a step of the directions
as selecting what it moves over, by wrapping it in a call to
"`remember'".  Strings in the directions are searched for (as
regexps) and moved over.  Any elisp function calls may be used in
the directions, and their effect on point will be, but those listed
on `statement-navigate-list-selector-functions' are treated
specially: they are expected to return a cons of the start and end
positions of the piece of text they describe. Thus, only such
functions should be used as the last step of a set of directions, and
only these should be given as the argument to "remember". You can
write your own functions of this nature, but you must add them to
`statement-navigate-list-selector-functions' for them to work
properly.  The selection functions are as follows: 
`expression'
      Selects the following s-exp. 

`expressions'
      Selects as many following s-exps as possible at the current
     level of nesting. 

`expression-contents'
      Selects the contents of the following s-exp (but not its
     brackets). 

`preceding-expression'
      Selects the preceding s-exp. 

`statement'
      Selects the following statement. This is defined by
     "`defmodal'" definitions for the major mode concerned, for the
     functions `move-into-previous-statement',
     `move-into-next-statement', `beginning-of-statement-internal',
     and `end-of-statement-internal'. (If you define these, you
     should also define `identify-statement',
     `compound-statement-open', `compound-statement-close',
     `insert-compound-statement-open', and
     `insert-compound-statement-close'.) 

`statements'
      Selects as many following statements as possible, at the
     current level of nesting. 

`statement-contents'
      If the following statement is a simple statement, select it. If
     it is a compound statement, select the statements that it is
     made of, but not the bracketing that groups them together. 

`from-start-of-statement'

`upto'

`start-of-match'
   


File: languide.info,  Node: Languide and Versor,  Next: Command Index,  Prev: Extension,  Up: Top

6 Languide and Versor
*********************




File: languide.info,  Node: Command Index,  Next: Concept Index,  Prev: Languide and Versor,  Up: Top

Command Index
*************

 [index ]
* Menu:

* Convert region to variable:            Convert to variable.   (line 6)
* Employ variable:                       Employ variable.       (line 6)




File: languide.info,  Node: Concept Index,  Prev: Command Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* Compound statements:                   Concepts.              (line 6)
* Expressions:                           Concepts.              (line 6)
* Statements:                            Concepts.              (line 6)

  



Tag Table:
Node: Top162
Node: Introduction5075
Node: Concepts6767
Node: Commands7823
Node: Alterations8539
Node: Expression handling8803
Node: Employ variable10742
Node: Convert to variable11079
Node: Convert to function11484
Node: Surround with call12077
Node: Remove call12440
Node: Statement handling12745
Node: Unify Statements13837
Node: Make conditional14180
Node: Make repeating14710
Node: Scoping point15051
Node: Decision point15510
Node: Setup15951
Node: Configuration16235
Node: Auto-edit overlay face16872
Node: Whole statement as container17317
Node: Cyclic17963
Node: IncludeContainer18291
Node: Extension18611
Node: Languide and Versor21584
Node: Command Index21733
Node: Concept Index22038

End Tag Table
